# CODIGOS PARA GIT 

## configurar nombre y correo 
git config --global user.name <nombre usuaria>
git config --global user.email <correo>

git config --global --list: Esto nos muestra el listado de configuraciones en el 
area global que hemos configurado.

git config --global core.editor "core --watt" : Este nos permite configuar el editor de codigo de tu preferencia, 
este caso el codigo para "vs code " es "core" y el "--wait", es para que el editor de codigo permanesca abierto hasta
que termines de hacer los cambios.

git config --global color.ui tru : permite que las salidas en pantalla de git nos devuelvan sean mas coloridas.

git config --global core.autocrlf : nos ayuda a que el saldo de linea entre windows , mac y linux sea compatible a la 
hora de hacer un push y clone de un repositorio.


## PRIMERO PASO EN GIT
pwd : nos indica en que repositorio estamos ubicados.
ls : se usa para listar todos los archivos dentro de un repositorio.
ls -a : nos muestras los archivos ocultos en el repositorio.
cd : se utiliza para movernos hacia el repositorio.
cd .. : se utiliza para movernos un repositorio antes.
mkdir <nombre del repositorio> : se utiliza para crear un repositorio.
mv <nombre-antiguo> <nombre-nuevo> : se usa para renombrar un repositorio.
rm -rf <nombre repositorio> : se utiliza para borrar un repositorio.

git init : iniciamos un repositorio en git.
git add <nombre-archivo> : nos sube los cambios al area de staged.
git add. : nos sube todos los archivos que haya cambios o nuevos al area de staged.
git status: nos muestra si hay cambios,archivos nuevos fuera de staged y archivos ya listos para hacer
un commit.
git rm --cached <nombre de archivo> se nos baja el archivo del area de staged y si haces un commit este 
no se sumara a los cambios o no hara ningun commit.


Staged o area de Staged: es el area donde se suben los cambios que estan listos para hacer un commit.

git commit -m "cometario-corto": nos permite hacer commit a los archivos que ya esta listo en el area
de staged , con un comentario corto.

git commit : nos permite  hace commit de los cambios, al mismo tiempo se nos abre
el editor de codigo para asi colocar el comentario , siendo tal vez las largo.

git commit -a: nos permite hacer un commit sin tener que subir los cambios al area
de staged.

## Restore , ckeckout y mas.

git checkout <nombre-archivo> : nos perimite restarurar el archivo que tenemos con
el ultimo commit que hicimos, solo se efectua si no hay nada en el area de stage.

git reset --hard : nos devuelve los cambios al ultimo commit que hicimos, nos posisicona
en el, ademas destaca los cambios hechos en el area de stage.

git commit -m "cometario-corto": nos permite hacer commit a los archivos que ya esta listo en el area
de staged , con un comentario corto.

git commit : nos permite  hace commit de los cambios, al mismo tiempo se nos abre
el editor de codigo para asi colocar el comentario , siendo tal vez las largo.

git commit -a: nos permite hacer un commit sin tener que subir los cambios al area
de staged.

## Restore , ckeckout y mas.

git checkout <nombre-archivo> : nos perimite restarurar el archivo que tenemos con
el ultimo commit que hicimos, solo se efectua si no hay nada en el area de stage.

Nota: si hacer git checkout despues de renombrar un archivo, nos trae una copia del archivo
con el nombre anterior.

git reset --hard : nos devuelve los cambios al ultimo commit que hicimos, nos posisicona
en el, ademas destaca los cambios hechos en el area de stage.

## Git Diff

git show : este nos enseña informacion sobre el ultimo archivo que hicimos commit y ademas
nos muestras la lias de codigo que se hicieron commit.

git diff --staged: esto nos muestra en rojo las lineas de codigo que cambiaron o se agregaron
nuevas en el area de staged y nos la compara con las que esta en el commit, mostrandolas en
rojo las que estan el area de staged y en verde la del commit 

##COMPRAR COMMIT

Para comparar commit necesitamos pimero indentificar los mismo, para eso usamos este codigo

git log --oneline: nos enseña un listado de los commit que han sidos subios,señanlado donde
estamos posicionados con un <HEAD>.

git log --oneline --all: nos muestra los commit de todas las ramas existentes.

Ahora, lo recomendable que cada commit para poder indentificar tenga 8 a mas caracteteres
ya que menos de ahi, hay posibilidad de parentesco, ¿como cambiamos eso?

git config --global core.abbrev <numero de caracteteres> : con esto podremos cambiar el 
numero de caracteres que nos muestra.

git diff <hasd1> <hasd2>: esto nos muestra la comparacion entre dos commit y nos enseña
los cambios entre esos dos archivos.

git diff --name-only <hasd>: nos muestra el nombre de los arhivos que cambiaron en este
commit seleccinado.

git diff --word-diff <hasd1> <hasd2> : nos muestra la diferencia entre las linea de codigo
que cambiaron entre estos dos hasd.

git ls-tree -r --name-only <hasd>: nos muestra el nombre de cada archivo que se encuentra en
el hasd seleccionado, tambien podemos utilizar el <head~> en este caso.

# ¿Como modificiar un commit?

git commit --amend : esto nos permite modificar el comentario de un commit, si quieres modircar
el contenido de un commit, pero tienes que hacer mas modificaciones que desees en los archivos
subir los al area de stage y luego haces el "git commit --amend".

Te aparecera tu editor de codigo con el nombre del commit que quiere editar y al lado tendra
que editarlo y si quieres asignarle un nuevo nombre entonces lo cambiar y luego finaliazmos con
git commit --amend.

Ahora para hacer que los demas commit regresen despues de haber editado el que queriamos, escribimos
git rebase --contine.

Nota: si quieres hacer el mismo procedimiento en algun commit inferior, solo tienes que cambiar
el head~ al numero del commit inferior que decidad utiliaz. ej: head~3.

Solo se utiliza en casos estremo, no es recomendable utiliazrlo.

¿Como desacer un commit?

git reset --soft <hasd> : no elimina el commit, pero nos los coloca otra vez en el area de 
stage;tambien se puede utilizar con Head~1 .

git reset --mixed <hasd>: este nos elimina el commit elegido, al mismo tiempo el que esta en 
el area de stage pero sin tocar nuestra area de trabajo.

git reset --hard <hasd>: este no redirije al hasd que selecionamos y nos trae esos cambios
devueta a nuestra area de trabajo, pero si lo colocas en el commit que estas posicionado actual
mente este te trae eso arhivos al area de trabajo.

Nota: al utilizarlo los cambios en el area de stage se eliminaran y si tienes cambios en el}
area local tambien los perderas.

##Ramas

git branch <nombre-de-la-rama>: asi creamos una rama, el nombre tiene que ir en minuscula y
separado por guiones.

git branch -m <nombre-de-la-rama-viejo> <nombre-de-la-rama-nuevo>: asi podremos renombrar
las ramas.

git branch -m <nombre-de-la-rama-nuevo> : esto nos permite cambiar el nombre de la rama, pero
tenemos que estar dentro de ella.

git checkout <nombre-de-la-rama>: nos posiciona en la rama que seleccionamos, pero la forma
mas segura es utilizando "git switch <nombre-de-la-rama>"

git swicth -c <nombre-de-la-rama>: nos crear una rama con el nombre selecionando y tambien
nos posiciona en ella.

¿Como borrar una rama?

para hacerlo primero necesitamos estar en la rama principal y despues se ejecuta el siguiente
comando:

git branch -d <nombre-de-la-rama>

# Fucionar ramas

git merge <nombre-de-la-rama>: este comando nos fucionara las ramas, pero primero hay que
estar colocado en la rama main antes de fucionar.

¿Como regresas al estado anterior unir una rama?

git reset --hard <hasd antes del merge>: este nos elimina el commit donde hicimoes el merge
al mismo tiempo no elimina la rama secundaria, para que regrese la rama secunadria colocamos
git switch optimize <nombre-de-la-rama-secundaria>.

# Confictos o Merge Confictos

Para resolver un conficto se hace lo siguiente:

1. nos muestra las ramas y nos indicara que hay un conficto abriendo tu
editos de codigo.

2. nos mostrara los cambios hechos en la rama main o master y luego en la rama
secundaria  y nos indicara las opciones finales, se te mostrara en tu editor
de codigo.

3. anes de escojer un a opcion iremos al boton en la parte derecha inferior
de tu editor que dice interfaz grafica, ahi nos mostrar una manera mas grafica
para efectuar los cambios.

4. para aceptar los cambios le damos clic a efectuar conbinacion en  tu  editor
o colocamos en git <git merge --continue>.

#Gitignore

Esto es para que los archivos que no queramos que se nos suban a staged, no lo hagan si 
hacemos un <git add . >, o por ninguna razon se suba sin que queramos.

Para utilizarlo solo tenemos que crear un archivo <.Gitignore> y colocar el nombre de los 
arhivos que quieremos que ignore y hacemos un commit a ese arhivos.

ahora si queredemos ignorar una x cantidad de archivos .txt, no podemos colocar todos los
nombres de todos los archivos, para eso utilizamos <*.txt>, es significa que todos los arhivos
.txt se ignoraran.

!archivo: cuando colocas el signo de <!> esto significa que no ignorar ese arhivo.

carpeta/ : esto significa que ignorara los archivos dentro de esa carpeta.

!carpeta/branch.png : esto significa que ignorara los archivos dentro de esa carpeta, execto 
el archivo branch.png.



